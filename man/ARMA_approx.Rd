% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arma_approx.R
\name{ARMA_approx}
\alias{ARMA_approx}
\title{ARMA_approx}
\usage{
ARMA_approx(p = 3, q = 3, n, R = 10000, ncl = 4)
}
\arguments{
\item{p}{AR-Order of ARMA polynomial. Three is suggested}

\item{q}{MA-Order of ARMA polynomial. Three is suggested}

\item{n}{Length of the underlying Wold representation to be approximated. Should be equal to the length of the time series of interest}

\item{R}{Number of grid points}

\item{ncl}{Number of cores to be used for parallel computation}
}
\value{

}
\description{
For a given order (p, q) of an ARMA polynomial, the function finds the best ARMA coefficients to approximate the fractional differencing polynomial.
This is done by first by choosing the ARMA coefficients that minimize the MSE between the Wald representation of the ARMA process and the Wald representation of the fractional differencing polynomial for a fixed d.
The procedure repeats for a fine grid of integration orders d, such that ARMA approximations are estimated for each grid point.
To obtain a smooth function in d, the function uses splines to connect neighboring ARMA coefficients. For details, see Hartl & Jucknewitz (2022, ER):
Automatically stores the resulting functions e.g. for (p, q)= (3, 3), n=250 as 'd2arma33_n250.RData'
Approximate state space modelling of unobserved fractional components.
}
\examples{
ARMA_approx(n=250)

}
